// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model을 변경할 때 마다 migrate해주어야 함(npm run migrate)
model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String? // ? : not required
  username  String     @unique
  email     String     @unique
  password  String
  bio       String?
  avatarURL String?
  photos    Photo[]
  likes     Like[]
  followers User[]     @relation("FollowRelation", references: [id])
  following User[]     @relation("FollowRelation", references: [id])
  comments  Comment[]
  chatRooms ChatRoom[]
  message   Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Photo {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  file      String
  caption   String?
  hashtags  Hashtag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([photoId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  comment   String
  userId    Int
  photoId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
